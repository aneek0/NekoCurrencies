#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
"""

import asyncio
import json
import os
import subprocess
import sys
import time
import logging
import hashlib
import shlex
from datetime import datetime
from typing import Dict, List, Optional
import aiohttp
import git
from pathlib import Path

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
PIP_INSTALL_CMD = [sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt']

class UpdateManager:
    def __init__(self, bot_instance=None, db_instance=None):
        self.bot = bot_instance
        self.db = db_instance
        self.current_version = self._get_current_version()
        self.update_check_interval = 3600  # 1 —á–∞—Å
        self.is_updating = False
        self.last_check = 0
        
        # –§–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.tracked_files = [
            'bot.py', 'currency_service.py', 'database.py', 'keyboards.py',
            'config.py', 'math_parser.py', 'requirements.txt'
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π —Ñ–∞–π–ª–æ–≤
        self.hashes_file = "file_hashes.json"
        self.file_hashes = self._load_file_hashes()
        
    def _get_current_version(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ git
            repo = git.Repo(search_parent_directories=True)
            return repo.head.object.hexsha[:8]
        except (git.InvalidGitRepositoryError, git.GitCommandError, OSError, ValueError):
            # –ï—Å–ª–∏ git –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp
            return datetime.now().strftime("%Y%m%d_%H%M%S")
    
    def _load_file_hashes(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ö–µ—à–∏ —Ñ–∞–π–ª–æ–≤"""
        if os.path.exists(self.hashes_file):
            try:
                with open(self.hashes_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, OSError, IOError):
                return {}
        return {}
    
    def _save_file_hashes(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–µ—à–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            with open(self.hashes_file, 'w', encoding='utf-8') as f:
                json.dump(self.file_hashes, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π: {e}")
    
    def _calculate_file_hash(self, file_path: str) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à —Ñ–∞–π–ª–∞"""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                return hashlib.sha256(content).hexdigest()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ –¥–ª—è {file_path}: {e}")
            return ""
    
    def _check_for_updates(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            repo = git.Repo(search_parent_directories=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            origin = repo.remotes.origin
            origin.fetch()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏ —É–¥–∞–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏–∏
            local_commit = repo.head.commit
            remote_commit = origin.refs.master.commit
            
            if local_commit.hexsha != remote_commit.hexsha:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {local_commit.hexsha[:8]} -> {remote_commit.hexsha[:8]}")
                return True
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ git –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            
            # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ö–µ—à–∞–º
            return self._check_file_changes()
        
        return False
    
    def _check_file_changes(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —Ö–µ—à–∞–º"""
        changes_detected = False
        
        for file_path in self.tracked_files:
            if os.path.exists(file_path):
                current_hash = self._calculate_file_hash(file_path)
                stored_hash = self.file_hashes.get(file_path, "")
                
                if current_hash != stored_hash:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ: {file_path}")
                    changes_detected = True
                    self.file_hashes[file_path] = current_hash
        
        if changes_detected:
            self._save_file_hashes()
            
        return changes_detected
    
    async def _pull_updates(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ git"""
        try:
            repo = git.Repo(search_parent_directories=True)
            origin = repo.remotes.origin
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
            old_version = self.current_version
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            origin.pull()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
            self.current_version = self._get_current_version()
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {old_version} -> {self.current_version}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
            return False
    
    async def _install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ requirements.txt
            if self._calculate_file_hash('requirements.txt') != self.file_hashes.get('requirements.txt', ''):
                logger.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ pip install —á–µ—Ä–µ–∑ importlib
                try:
                    import subprocess
                    import sys
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    result = subprocess.run([
                        sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
                    ], capture_output=True, text=True, shell=False, check=False)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
                    return False
                
                if result.returncode == 0:
                    logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    async def _notify_users(self, old_version: str, new_version: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
        if not self.bot or not self.db:
            return
        
        try:
            users = self.db.get_all_users()
            
            # –¢–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notifications = {
                'ru': f"üîÑ **–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!**\n\n"
                      f"–í–µ—Ä—Å–∏—è: `{old_version}` ‚Üí `{new_version}`\n\n"
                      f"‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è:\n"
                      f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                      f"‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
                      f"‚Ä¢ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
                      f"–ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ!",
                
                'en': f"üîÑ **Bot updated!**\n\n"
                      f"Version: `{old_version}` ‚Üí `{new_version}`\n\n"
                      f"‚ú® New features and improvements:\n"
                      f"‚Ä¢ Automatic updates\n"
                      f"‚Ä¢ Enhanced stability\n"
                      f"‚Ä¢ New features\n\n"
                      f"Bot continues to work normally!"
            }
            
            success_count = 0
            error_count = 0
            
            for user in users:
                try:
                    user_id = user.get('user_id')
                    if not user_id:
                        continue
                    
                    lang = user.get('language', 'ru')
                    message = notifications.get(lang, notifications['ru'])
                    
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="Markdown"
                    )
                    
                    success_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    error_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def _restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        try:
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
            restart_info = {
                'timestamp': datetime.now().isoformat(),
                'version': self.current_version,
                'reason': 'update'
            }
            
            with open('restart_info.json', 'w', encoding='utf-8') as f:
                json.dump(restart_info, f, ensure_ascii=False, indent=2)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            os._exit(0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
    
    async def perform_update(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.is_updating:
            logger.warning("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            return False
        
        self.is_updating = True
        
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é
            old_version = self.current_version
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if not await self._pull_updates():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if not await self._install_dependencies():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
                return False
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await self._notify_users(old_version, self.current_version)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await asyncio.sleep(2)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self._restart_bot()
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
        finally:
            self.is_updating = False
    
    async def check_and_update(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ
        if current_time - self.last_check < self.update_check_interval:
            return False
        
        self.last_check = current_time
        
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        if self._check_for_updates():
            logger.info("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...")
            return await self.perform_update()
        
        return False
    
    async def start_update_monitor(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        while True:
            try:
                await self.check_and_update()
                await asyncio.sleep(self.update_check_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def get_update_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö"""
        return {
            'current_version': self.current_version,
            'last_check': self.last_check,
            'is_updating': self.is_updating,
            'tracked_files': self.tracked_files,
            'file_hashes': self.file_hashes
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª –ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def check_restart_after_update() -> Optional[Dict]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        if os.path.exists('restart_info.json'):
            with open('restart_info.json', 'r', encoding='utf-8') as f:
                restart_info = json.load(f)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
            os.remove('restart_info.json')
            
            return restart_info
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
    
    return None 