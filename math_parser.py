import re
import ast
from typing import Optional, Tuple

class MathParser:
    """–ü–∞—Ä—Å–µ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞–ª—é—Ç"""
    
    def __init__(self):
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        self.math_patterns = [
            # –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: (20 + 5) * 4
            r'\([^)]*[\+\-\*\/][^)]*\)[\s]*[\+\-\*\/][\s]*[\d\.]+',
            # –í—ã—Ä–∞–∂–µ–Ω–∏—è —Å —á–∏—Å–ª–∞–º–∏ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏: 20 + 5 * 4
            r'[\d\.]+[\s]*[\+\-\*\/][\s]*[\d\.]+[\s]*[\+\-\*\/]?[\s]*[\d\.]*',
            # –í—ã—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö: (20 + 5)
            r'\([^)]*[\+\-\*\/][^)]*\)',
        ]
        
        # –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
        self.operators = {
            '+': 'add',
            '-': 'sub', 
            '*': 'mul',
            '/': 'truediv',
            '√ó': 'mul',
            '√∑': 'truediv',
            '‚ãÖ': 'mul',
        }
    
    def extract_math_expression(self, text: str) -> Optional[Tuple[str, str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∞–ª—é—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Returns:
            Tuple[str, str] –∏–ª–∏ None: (–≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –≤–∞–ª—é—Ç–∞)
        """
        text = text.strip()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if not self._contains_math_expression(text):
            return None
        
        # –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ –∫–æ–Ω—Ü–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        currency_match = None
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–∞–ª—é—Ç –≤ –∫–æ–Ω—Ü–µ
        currency_patterns = [
            r'([$‚Ç¨¬£¬•‚ÇΩ‚Ç¥‚Ç∏‚Ç©‚Çπ‚ÇøŒûüíé])$',  # –°–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
            r'([a-z]{3})$',  # –ö–æ–¥—ã –≤–∞–ª—é—Ç (USD, EUR)
            r'([–∞-—è—ë]+)$',    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
        ]
        
        for pattern in currency_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                currency_match = match.group(1)
                # –£–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                text = text[:match.start()].strip()
                break
        
        # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ü–µ, –∏—â–µ–º –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–µ
        if not currency_match:
            # –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ –Ω–∞—á–∞–ª–µ
            start_patterns = [
                r'^([$‚Ç¨¬£¬•‚ÇΩ‚Ç¥‚Ç∏‚Ç©‚Çπ‚ÇøŒûüíé])\s*',
                r'^([a-z]{3})\s+',
            ]
            
            for pattern in start_patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    currency_match = match.group(1)
                    text = text[match.end():].strip()
                    break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞—á–∞–ª–µ, –∏—â–µ–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
            if not currency_match:
                mid_patterns = [
                    r'\s+([$‚Ç¨¬£¬•‚ÇΩ‚Ç¥‚Ç∏‚Ç©‚Çπ‚ÇøŒûüíé])\s+',
                    r'\s+([a-z]{3})\s+',
                ]
                
                for pattern in mid_patterns:
                    match = re.search(pattern, text, re.IGNORECASE)
                    if match:
                        currency_match = match.group(1)
                        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                        parts = text.split(match.group(0))
                        if len(parts) >= 2:
                            text = (parts[0] + parts[1]).strip()
                        break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        if self._contains_math_expression(text):
            return text, currency_match
        
        return None
    
    def _contains_math_expression(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        has_operators = any(op in text for op in ['+', '-', '*', '/', '√ó', '√∑', '‚ãÖ'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª (–≤–∫–ª—é—á–∞—è —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ –∫/–∫–∫)
        has_numbers = bool(re.search(r'\d+[–∫–∫]?', text))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–æ–±–æ–∫
        has_brackets = '(' in text and ')' in text
        
        # –î–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–æ —Å–∫–æ–±–∫–∞–º–∏ –Ω—É–∂–Ω—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, –∏ —á–∏—Å–ª–∞
        if has_brackets:
            return has_operators and has_numbers
        
        # –î–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ —Å–∫–æ–±–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —á–∏—Å–µ–ª
        return has_operators and has_numbers
    
    def evaluate_expression(self, expression: str) -> Optional[float]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            expression: –°—Ç—Ä–æ–∫–∞ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            
        Returns:
            float –∏–ª–∏ None: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        """
        try:
            # –û—á–∏—â–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            clean_expr = self._clean_expression(expression)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã –∫/–∫–∫ –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º
            clean_expr = self._process_suffixes(clean_expr)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            if not self._is_safe_expression(clean_expr):
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            try:
                result = ast.literal_eval(clean_expr)
            except (ValueError, SyntaxError):
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —á–∏—Å–ª–æ
            if isinstance(result, (int, float)):
                return float(result)
            
            return None
            
        except (ValueError, SyntaxError, ZeroDivisionError, NameError):
            return None
    
    def _process_suffixes(self, expression: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã –∫/–∫–∫ –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º –∫–∫ –Ω–∞ *1000000
        expression = re.sub(r'(\d+)–∫–∫', r'\1*1000000', expression)
        # –ó–∞–º–µ–Ω—è–µ–º –∫ –Ω–∞ *1000
        expression = re.sub(r'(\d+)–∫', r'\1*1000', expression)
        return expression
    
    def _clean_expression(self, expression: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
        replacements = {
            '√ó': '*',
            '√∑': '/',
            '‚ãÖ': '*',
            '‚Äî': '-',  # –î–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ
            '‚Äì': '-',  # –ö–æ—Ä–æ—Ç–∫–æ–µ —Ç–∏—Ä–µ
        }
        
        for old, new in replacements.items():
            expression = expression.replace(old, new)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        expression = re.sub(r'\s+', '', expression)
        
        # –ù–ï —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
        if expression.count('(') == expression.count(')') and expression.count('(') > 0:
            # –ï—Å–ª–∏ —Å–∫–æ–±–∫–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–∞—Ä–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            pass
        else:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã
            expression = expression.strip('()')
        
        return expression
    
    def _is_safe_expression(self, expression: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        allowed_chars = set('0123456789+-*/.() ')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not all(c in allowed_chars for c in expression):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
        if expression.count('(') != expression.count(')'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        if re.search(r'[\+\-\*\/]{2,}', expression):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–∫—Ä–æ–º–µ –º–∏–Ω—É—Å–∞)
        if expression and expression[0] in ['+', '*', '/']:
            return False
        
        return True
    
    def parse_and_evaluate(self, text: str) -> Optional[Tuple[float, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –µ–≥–æ
        
        Returns:
            Tuple[float, str] –∏–ª–∏ None: (—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–∞–ª—é—Ç–∞)
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–∞–ª—é—Ç—É
        result = self.extract_math_expression(text)
        if not result:
            return None
        
        expression, currency = result
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        value = self.evaluate_expression(expression)
        if value is None:
            return None
        
        return value, currency
    
    def format_result(self, value: float, currency: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"""
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        rounded_value = round(value, 2)
        
        # –£–±–∏—Ä–∞–µ–º .0 –µ—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ
        if rounded_value == int(rounded_value):
            formatted_value = str(int(rounded_value))
        else:
            formatted_value = str(rounded_value)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if currency:
            if currency in ['$', 'USD']:
                return f"${formatted_value}"
            elif currency in ['‚Ç¨', 'EUR']:
                return f"‚Ç¨{formatted_value}"
            elif currency in ['¬£', 'GBP']:
                return f"¬£{formatted_value}"
            elif currency in ['‚ÇΩ', 'RUB']:
                return f"‚ÇΩ{formatted_value}"
            elif currency in ['‚Ç¥', 'UAH']:
                return f"‚Ç¥{formatted_value}"
            elif currency in ['‚Ç∏', 'KZT']:
                return f"‚Ç∏{formatted_value}"
            elif currency in ['‚Ç©', 'KRW']:
                return f"‚Ç©{formatted_value}"
            elif currency in ['‚Çπ', 'INR']:
                return f"‚Çπ{formatted_value}"
            elif currency in ['‚Çø', 'BTC']:
                return f"‚Çø{formatted_value}"
            elif currency in ['Œû', 'ETH']:
                return f"Œû{formatted_value}"
            elif currency in ['üíé', 'TON']:
                return f"üíé{formatted_value}"
            else:
                return f"{formatted_value} {currency}"
        else:
            return formatted_value 