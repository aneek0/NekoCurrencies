#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ keep-alive –º–µ—Ö–∞–Ω–∏–∑–º–∞
"""

import asyncio
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
start_time = time.time()
last_activity_time = time.time()
is_running = True

async def keep_alive():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    global last_activity_time
    while is_running:
        try:
            current_time = time.time()
            uptime = current_time - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if int(current_time) % 30 == 0:
                logger.info(f"ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞. Uptime: {uptime:.0f}s, –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_time - last_activity_time:.0f}s –Ω–∞–∑–∞–¥")
            
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ keep-alive: {e}")
            await asyncio.sleep(5)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ

async def simulate_activity():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global last_activity_time
    
    for i in range(5):
        await asyncio.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥
        last_activity_time = time.time()
        logger.info(f"üìù –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å #{i+1}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è keep-alive –º–µ—Ö–∞–Ω–∏–∑–º–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ —Ñ–æ–Ω–µ
    keep_alive_task = asyncio.create_task(keep_alive())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_task = asyncio.create_task(simulate_activity())
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await activity_task
        
        # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ keep-alive
        await asyncio.sleep(30)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º keep-alive
        global is_running
        is_running = False
        keep_alive_task.cancel()
        
        try:
            await keep_alive_task
        except asyncio.CancelledError:
            pass
        
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main()) 