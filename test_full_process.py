import asyncio
from currency_service import CurrencyService
from database import UserDatabase
from config import FIAT_CURRENCIES, CRYPTO_CURRENCIES

async def test_full_process():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    service = CurrencyService()
    db = UserDatabase()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = 1286936026
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: "5700.0 –±–∞–∫—Å–æ–≤"
    test_text = "5700.0 –±–∞–∫—Å–æ–≤"
    print(f"–¢–µ—Å—Ç 1: {test_text}")
    
    try:
        # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏ –≤–∞–ª—é—Ç—ã
        result = service.extract_number_and_currency(test_text)
        if result:
            amount, from_currency = result
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: {amount} {from_currency}")
            
            # –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            selected_currencies = db.get_selected_currencies(user_id)
            all_target_currencies = selected_currencies['fiat'] + selected_currencies['crypto']
            
            if not all_target_currencies:
                all_target_currencies = list(FIAT_CURRENCIES.keys()) + list(CRYPTO_CURRENCIES.keys())
            
            # –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π
            if from_currency in all_target_currencies:
                all_target_currencies.remove(from_currency)
            
            print(f"‚úÖ –¶–µ–ª–µ–≤—ã–µ –≤–∞–ª—é—Ç—ã: {all_target_currencies[:5]}... (–≤—Å–µ–≥–æ: {len(all_target_currencies)})")
            
            # –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            api_source = db.get_api_source(user_id)
            print(f"‚úÖ API –∏—Å—Ç–æ—á–Ω–∏–∫: {api_source}")
            
            conversions = await service.convert_currency(amount, from_currency, all_target_currencies, api_source=api_source)
            
            if conversions:
                print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ {len(conversions)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                for i, (currency, info) in enumerate(list(conversions.items())[:3]):
                    if isinstance(info, dict):
                        converted_amount = info.get('amount', 0)
                        source = info.get('source')
                    else:
                        converted_amount = info
                        source = None
                    print(f"   {currency}: {converted_amount:.2f} (src: {source})")
            else:
                print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    print("-" * 40)
    
    await service.close()

if __name__ == "__main__":
    asyncio.run(test_full_process()) 