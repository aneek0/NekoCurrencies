import asyncio
import logging
import time
import argparse
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
import re
from config import BOT_TOKEN, FIAT_CURRENCIES, CRYPTO_CURRENCIES, CURRENCY_ALIASES
from currency_service import CurrencyService
from keyboards import (
    get_main_menu_keyboard, get_letter_keyboard,
    get_currencies_by_letter_keyboard, get_settings_keyboard, 
    get_processing_mode_keyboard, get_back_keyboard, get_help_keyboard,
    get_currency_selection_keyboard, get_api_source_keyboard, get_debug_mode_keyboard,
    get_language_keyboard, get_appearance_keyboard
)
from database import UserDatabase
from update_manager import UpdateManager, check_restart_after_update
from typing import Dict
import aiohttp
import signal
import sys

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
if sys.platform == "win32":
    # Windows: –∏—Å–ø–æ–ª—å–∑—É–µ–º ProactorEventLoop –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
else:
    # Unix: –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å uvloop
    try:
        import uvloop
        uvloop.install()
    except ImportError:
        pass  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π event loop

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
currency_service = CurrencyService()
db = UserDatabase()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
bot_start_time = time.time()
last_activity_time = time.time()
is_running = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞)
update_manager = None

# Keep-alive –º–µ—Ö–∞–Ω–∏–∑–º
async def keep_alive():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    global last_activity_time
    while is_running:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
            me = await bot.get_me()
            current_time = time.time()
            uptime = current_time - bot_start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if int(current_time) % 300 == 0:
                logger.info(f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. Uptime: {uptime:.0f}s, –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_time - last_activity_time:.0f}s –Ω–∞–∑–∞–¥")
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ keep-alive: {e}")
            await asyncio.sleep(30)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global is_running
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    is_running = False

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
TEXTS: Dict[str, Dict[str, str]] = {
	'ru': {
		'welcome': (
			"ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –ø–∞—Ä —á–∏—Å–µ–ª –∏ –≤–∞–ª—é—Ç, "
			"—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã –∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏.\n\n"
			"üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å: \"5 –≥—Ä–∏–≤–µ–Ω—å\" –∏–ª–∏ \"40$\".\n\n"
			"üßÆ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: \"(20 + 5) * 4 –¥–æ–ª–ª–∞—Ä–∞\" ‚Üí \"$100\".\n\n"
			"üí¨ –î–ª—è –≤–∞–ª—é—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –∫–æ–¥—ã, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–ª–µ–Ω–≥. "
			"–ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞—Å—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—ë –∫–æ–¥ (USD, EUR).\n\n"
			"üí¨ –ß–∏—Å–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: \"0.1$\" –∏ \"0,1$\"; \"123 524.53$\" –∏ \"123,524.53$\"."
		),
		'help': (
			"ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç**\n\n"
			"**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
			"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
			"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 150+ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç\n"
			"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 25+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
			"‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ —Ç–µ–∫—Å—Ç–µ\n"
			"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ W2N (—Å–ª–æ–≤–∞ –≤ —á–∏—Å–ª–∞)\n"
			"‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: \"(20 + 5) * 4 –¥–æ–ª–ª–∞—Ä–∞\" ‚Üí \"$100\"\n\n"
			"**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
			"1. –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É: \"100 –¥–æ–ª–ª–∞—Ä–æ–≤\"\n"
			"2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –≤–∞–ª—é—Ç—ã: \"50 EUR\"\n"
			"3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: \"0.1$\", \"0,1$\", \"123 524.53$\"\n"
			"4. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è: \"(20 + 5) * 4$\", \"10 + 20 –µ–≤—Ä–æ\"\n\n"
			"**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:**\n"
			"‚Ä¢ –§–∏–∞—Ç–Ω—ã–µ: USD, EUR, RUB, UAH, BYN, KZT –∏ –¥—Ä—É–≥–∏–µ\n"
			"‚Ä¢ –ö—Ä–∏–ø—Ç–æ: BTC, ETH, USDT, BNB, ADA, SOL –∏ –¥—Ä—É–≥–∏–µ\n\n"
			"**–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**\n"
			"‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π - —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
			"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
			"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - —Å W2N –∏ M2N\n\n"
			"**–ö–æ–º–∞–Ω–¥—ã:**\n"
			"/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
			"/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
			"/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
			"üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!"
		),
		'settings': (
			"‚öôÔ∏è **–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞**\n\n"
			"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:\n"
			"‚Ä¢ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
			"‚Ä¢ –í–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n"
			"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç\n\n"
			"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:"
		),
		'processing_desc': (
			"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–∞–∫ –±–æ—Ç –±—É–¥–µ—Ç <b><u>–∏—Å–∫–∞—Ç—å –≤–∞–ª—é—Ç—ã –∏ —á–∏—Å–ª–∞</u></b> –≤ —Ç–µ–∫—Å—Ç–µ.\n\n"
			"- –í <b><u>—É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ</u></b> –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ —á–∏—Å–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é W2N –∏ M2N.\n"
			"- –í <b><u>—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ</u></b> –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ W2N –∏ M2N.\n"
			"- –í <b><u>—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ</u></b> –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ W2N –∏ M2N.\n\n"
			"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º:"
		),
		'choose_type': "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
		'fiat_menu': "–í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç:",
		'crypto_menu': "–í—ã –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç:",
		'choose_by_letter': "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è –Ω–∞ –±—É–∫–≤—É '{letter}':",
		'no_currencies_selected': "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞–ª—é—Ç—ã –≤ /settings ‚Üí üíµ –í–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
		'error_processing': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
		'conversion_failed': "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {amount} {from_currency}",
		'inline_help_title': "üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º",
		'inline_help_desc': "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15 –±–∞–∫—Å–æ–≤, 1000 —Ä—É–±–ª–µ–π",
		'inline_help_message': (
			"üí° **–ò–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º –±–æ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç**\n\n"
			"–ß—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É –≤ –ª—é–±–æ–º —á–∞—Ç–µ:\n"
			"1. –ù–∞–ø–∏—à–∏—Ç–µ `@aneekocurrency_bot`\n"
			"2. –î–æ–±–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É\n"
			"3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
			"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
			"‚Ä¢ `15 –±–∞–∫—Å–æ–≤`\n"
			"‚Ä¢ `1000 —Ä—É–±–ª–µ–π`\n"
			"‚Ä¢ `500 –µ–≤—Ä–æ`\n"
			"‚Ä¢ `50 –±–µ–ª—Ä—É–±–ª–µ–π`"
		),
		'inline_err_title': "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞–ª—é—Ç—É",
		'inline_err_desc': "–ó–∞–ø—Ä–æ—Å: '{query}' - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç",
		'inline_err_message': (
			"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞–ª—é—Ç—É**\n\n"
			"–ó–∞–ø—Ä–æ—Å: `{query}`\n\n"
			"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
			"‚Ä¢ `15 –±–∞–∫—Å–æ–≤`\n"
			"‚Ä¢ `1000 —Ä—É–±–ª–µ–π`\n"
			"‚Ä¢ `500 –µ–≤—Ä–æ`\n"
			"‚Ä¢ `50 –±–µ–ª—Ä—É–±–ª–µ–π`\n"
			"‚Ä¢ `100 —Ç–µ–Ω–≥–µ`"
		),
		'inline_conv_title': "üí± {amount} {from_currency} ‚Üí –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è",
		'inline_conv_desc': "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã",
		'inline_fail_title': "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
		'inline_fail_desc': "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç",
		'inline_fail_message': (
			"‚ùå **–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏**\n\n"
			"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {amount} {from_currency}\n"
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
		),
		'inline_proc_err_title': "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
		'inline_proc_err_desc': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
		'inline_proc_err_message': (
			"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
			"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
		),
		'mode_changed': "–†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
		'already_here': "–£–∂–µ –≤ —ç—Ç–æ–º –º–µ–Ω—é",
		'already_main': "–£–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
		'api_choose': "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤ (API):",
		'api_changed': "–ò—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
		'lang_choose': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
		'lang_changed': "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!",
		'debug_title': "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏?",
		'debug_changed': "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!",
		'added_currency': "–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª—é—Ç–∞: {name}",
		'removed_currency': "–£–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {name}",
	},
	'en': {
		'welcome': (
			"ü§ñ The bot recognizes numbers and currencies in text "
			"and converts them into other currencies using up-to-date rates.\n\n"
			"üí¨ Try: \"5 hryvnias\" or \"40$\".\n\n"
			"üßÆ Supports mathematical expressions: \"(20 + 5) * 4 dollars\" ‚Üí \"$100\".\n\n"
			"üí¨ You can use currency codes, names, or slang. "
			"If a currency isn't recognized by name, try its code (USD, EUR).\n\n"
			"üí¨ Numbers can be written in various formats: \"0.1$\" and \"0,1$\"; \"123 524.53$\" and \"123,524.53$\"."
		),
		'help': (
			"ü§ñ **Currency Converter Bot Help**\n\n"
			"**Features:**\n"
			"‚Ä¢ Real-time currency conversion\n"
			"‚Ä¢ 150+ fiat currencies supported\n"
			"‚Ä¢ 25+ cryptocurrencies supported\n"
			"‚Ä¢ Number recognition in text\n"
			"‚Ä¢ W2N support (words to numbers)\n"
			"‚Ä¢ Mathematical expressions: \"(20 + 5) * 4 dollars\" ‚Üí \"$100\"\n\n"
			"**How to use:**\n"
			"1. Type an amount and currency: \"100 dollars\"\n"
			"2. Or use a code: \"50 EUR\"\n"
			"3. Supported formats: \"0.1$\", \"0,1$\", \"123 524.53$\"\n"
			"4. Mathematical expressions: \"(20 + 5) * 4$\", \"10 + 20 euros\"\n\n"
			"**Supported currencies:**\n"
			"‚Ä¢ Fiat: USD, EUR, RUB, UAH, BYN, KZT and more\n"
			"‚Ä¢ Crypto: BTC, ETH, USDT, BNB, ADA, SOL and more\n\n"
			"**Modes:**\n"
			"‚Ä¢ Simplified - only numbers at the start of a message\n"
			"‚Ä¢ Standard - usual processing\n"
			"‚Ä¢ Advanced - with W2N and M2N\n\n"
			"**Commands:**\n"
			"/start - Main menu\n"
			"/help - This help\n"
			"/settings - Bot settings\n\n"
			"üí° **Tip:** Use /settings to pick target currencies!"
		),
		'settings': (
			"‚öôÔ∏è **Bot settings**\n\n"
			"Here you can configure:\n"
			"‚Ä¢ Message processing mode\n"
			"‚Ä¢ Target currencies\n"
			"‚Ä¢ Rates source (API)\n\n"
			"Choose an option:"
		),
		'processing_desc': (
			"Here you can configure how the bot will <b><u>search for currencies and numbers</u></b> in text.\n\n"
			"- In <b><u>simplified mode</u></b> the bot reacts only to messages where a number is at the very beginning, and doesn't process them using W2N and M2N.\n"
			"- In <b><u>standard mode</u></b> the bot processes all messages, but doesn't use W2N and M2N for this.\n"
			"- In <b><u>advanced mode</u></b> the bot additionally uses W2N and M2N for processing.\n\n"
			"Choose the mode you need:"
		),
		'choose_type': "Choose currency type to configure:",
		'fiat_menu': "Fiat currencies selection menu.\nPlease choose a letter:",
		'crypto_menu': "Cryptocurrency selection menu.\nPlease choose a letter:",
		'choose_by_letter': "Choose a currency starting with '{letter}':",
		'no_currencies_selected': "‚ö†Ô∏è You haven't selected currencies for conversion!\n\nPlease configure currencies in /settings ‚Üí üíµ Target currencies",
		'error_processing': "An error occurred while processing the message. Try again.",
		'conversion_failed': "Failed to convert {amount} {from_currency}",
		'inline_help_title': "üí° How to use inline mode",
		'inline_help_desc': "Type amount and currency, e.g.: 15 bucks, 1000 rubles",
		'inline_help_message': (
			"üí° **Inline mode**\n\n"
			"To convert currency in any chat:\n"
			"1. Type `@aneekocurrency_bot`\n"
			"2. Add amount and currency\n"
			"3. Pick a result\n\n"
			"**Examples:**\n"
			"‚Ä¢ `15 bucks`\n"
			"‚Ä¢ `1000 rubles`\n"
			"‚Ä¢ `500 euros`\n"
			"‚Ä¢ `50 belrubles`"
		),
		'inline_err_title': "‚ùå Could not recognize currency",
		'inline_err_desc': "Query: '{query}' - try another format",
		'inline_err_message': (
			"‚ùå **Could not recognize currency**\n\n"
			"Query: `{query}`\n\n"
			"**Valid formats:**\n"
			"‚Ä¢ `15 bucks`\n"
			"‚Ä¢ `1000 rubles`\n"
			"‚Ä¢ `500 euros`\n"
			"‚Ä¢ `50 belrubles`\n"
			"‚Ä¢ `100 tenge`"
		),
		'inline_conv_title': "üí± {amount} {from_currency} ‚Üí Conversion",
		'inline_conv_desc': "Show conversion to popular currencies",
		'inline_fail_title': "‚ùå Conversion error",
		'inline_fail_desc': "Failed to get exchange rates",
		'inline_fail_message': (
			"‚ùå **Conversion error**\n\n"
			"Failed to convert {amount} {from_currency}\n"
			"Try again later or contact the administrator."
		),
		'inline_proc_err_title': "‚ùå Processing error",
		'inline_proc_err_desc': "An error occurred while processing the request",
		'inline_proc_err_message': (
			"‚ùå **Processing error**\n\n"
			"An error occurred while processing your request.\n"
			"Try again later or contact the administrator."
		),
		'mode_changed': "Processing mode updated!",
		'already_here': "Already in this menu",
		'already_main': "Already at main menu",
		'api_choose': "Choose rates source (API):",
		'api_changed': "Rates source updated!",
		'lang_choose': "Choose interface language:",
		'lang_changed': "Language updated!",
		'debug_title': "Debug mode. Show data source for each line?",
		'debug_changed': "Debug mode updated!",
		'added_currency': "Added currency: {name}",
		'removed_currency': "Removed currency: {name}",
	},
}

def _t(key: str, lang: str = 'ru', **kwargs) -> str:
	text = TEXTS.get(lang, TEXTS['ru']).get(key, TEXTS['ru'].get(key, key))
	if kwargs:
		try:
			return text.format(**kwargs)
		except Exception:
			return text
	return text

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global last_activity_time
    last_activity_time = time.time()
    
    lang = db.get_language(message.from_user.id)
    await message.answer(_t('welcome', lang), reply_markup=get_main_menu_keyboard(lang))

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    global last_activity_time
    last_activity_time = time.time()
    
    lang = db.get_language(message.from_user.id)
    await message.answer(_t('help', lang), reply_markup=get_help_keyboard(lang))

@dp.message(Command("settings"))
async def cmd_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    global last_activity_time
    last_activity_time = time.time()
    
    lang = db.get_language(message.from_user.id)
    await message.answer(_t('settings', lang), reply_markup=get_settings_keyboard(lang))

@dp.message(Command("update"))
async def cmd_update(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /update - —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    global last_activity_time, update_manager
    last_activity_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_ids = [1286936026]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    if message.from_user.id not in admin_ids:
        lang = db.get_language(message.from_user.id)
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not update_manager:
        await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    try:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = await update_manager.perform_update()
        
        if success:
            await message.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("version"))
async def cmd_version(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /version - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞"""
    global last_activity_time, update_manager
    last_activity_time = time.time()
    
    if update_manager:
        info = update_manager.get_update_info()
        version = info.get('current_version', 'Unknown')
        last_check = info.get('last_check', 0)
        
        if last_check > 0:
            last_check_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(last_check))
        else:
            last_check_time = "–ù–∏–∫–æ–≥–¥–∞"
        
        response = f"ü§ñ **–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:** `{version}`\n"
        response += f"üìÖ **–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:** {last_check_time}\n"
        response += f"üîÑ **–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:** {'–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è' if info.get('is_updating') else '–ê–∫—Ç–∏–≤–µ–Ω'}"
        
        await message.answer(response, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

@dp.callback_query(lambda c: c.data == "settings")
async def process_settings_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global last_activity_time
    last_activity_time = time.time()
    
    lang = db.get_language(callback.from_user.id)
    await callback.message.edit_text(_t('settings', lang), reply_markup=get_settings_keyboard(lang))

@dp.callback_query(lambda c: c.data == "processing_mode")
async def process_processing_mode_callback(callback: CallbackQuery):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
	user_id = callback.from_user.id
	current_mode = db.get_processing_mode(user_id)
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('processing_desc', lang), reply_markup=get_processing_mode_keyboard(current_mode, lang), parse_mode="HTML")

@dp.callback_query(lambda c: c.data == "currency_selection")
async def process_currency_selection_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    lang = db.get_language(callback.from_user.id)
    await callback.message.edit_text(_t('choose_type', lang), reply_markup=get_currency_selection_keyboard(lang))

@dp.callback_query(lambda c: c.data.startswith("set_mode_"))
async def process_set_mode_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    user_id = callback.from_user.id
    mode = callback.data.split("_")[2]
    
    db.set_processing_mode(user_id, mode)
    
    await callback.answer(f"{_t('mode_changed', db.get_language(callback.from_user.id))}")
    lang = db.get_language(callback.from_user.id)
    await callback.message.edit_text(_t('mode_changed', lang), reply_markup=get_back_keyboard("back_to_settings", lang))

@dp.callback_query(lambda c: c.data == "back_to_settings")
async def process_back_to_settings_callback(callback: CallbackQuery):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
	try:
		lang = db.get_language(callback.from_user.id)
		settings_text = _t('settings', lang)
		await callback.message.edit_text(settings_text, reply_markup=get_settings_keyboard(lang))
	except Exception:
		await callback.answer(_t('already_here', db.get_language(callback.from_user.id)))

@dp.callback_query(lambda c: c.data == "back_to_main")
async def process_back_to_main_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        lang = db.get_language(callback.from_user.id)
        welcome_text = _t('welcome', lang)
        await callback.message.edit_text(welcome_text, reply_markup=get_main_menu_keyboard(lang))
    except Exception:
        await callback.answer(_t('already_main', db.get_language(callback.from_user.id)))

@dp.callback_query(lambda c: c.data in ["fiat_currencies", "crypto_currencies"])
async def process_currency_type_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç"""
    currency_type = callback.data.split("_")[0]  # fiat –∏–ª–∏ crypto
    
    try:
        lang = db.get_language(callback.from_user.id)
        text = _t('fiat_menu', lang) if currency_type == "fiat" else _t('crypto_menu', lang)
        await callback.message.edit_text(text, reply_markup=get_letter_keyboard(currency_type, lang))
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

@dp.callback_query(lambda c: c.data.startswith("letter_"))
async def process_letter_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—É–∫–≤—ã"""
    parts = callback.data.split("_")
    currency_type = parts[1]
    letter = parts[2]
    
    try:
        user_id = callback.from_user.id
        selected = db.get_selected_currencies(user_id)
        selected_codes = selected['fiat'] if currency_type == 'fiat' else selected['crypto']
        lang = db.get_language(callback.from_user.id)
        await callback.message.edit_text(_t('choose_by_letter', lang, letter=letter), reply_markup=get_currencies_by_letter_keyboard(currency_type, letter, selected_codes, db.get_language(callback.from_user.id)))
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–ª—é—Ç")

@dp.callback_query(lambda c: c.data.startswith("select_currency_"))
async def process_select_currency_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã"""
    parts = callback.data.split("_")
    currency_type = parts[2]
    currency_code = parts[3]
    
    try:
        user_id = callback.from_user.id
        selected = db.get_selected_currencies(user_id)
        selected_codes = selected['fiat'] if currency_type == 'fiat' else selected['crypto']
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        if currency_code in selected_codes:
            # –£–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É
            db.remove_selected_currency(user_id, currency_type, currency_code)
            action = "removed"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
            db.add_selected_currency(user_id, currency_type, currency_code)
            action = "added"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        currencies = FIAT_CURRENCIES if currency_type == "fiat" else CRYPTO_CURRENCIES
        currency_name = currencies.get(currency_code, currency_code)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏
        lang = db.get_language(callback.from_user.id)
        if action == "added":
            await callback.answer(_t('added_currency', lang, name=currency_name))
        else:
            await callback.answer(_t('removed_currency', lang, name=currency_name))
        
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –±—É–∫–≤–æ–π
        # –ù–∞—Ö–æ–¥–∏–º –±—É–∫–≤—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        current_text = callback.message.text
        if "–±—É–∫–≤—É" in current_text or "letter" in current_text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—É–∫–≤—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
            import re
            letter_match = re.search(r"['\"]([A-Z–ê-–Ø])['\"]", current_text)
            if letter_match:
                letter = letter_match.group(1)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
                selected = db.get_selected_currencies(user_id)
                selected_codes = selected['fiat'] if currency_type == 'fiat' else selected['crypto']
                lang = db.get_language(callback.from_user.id)
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Ç–µ–∫—Å—Ç, –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                await callback.message.edit_text(
                    _t('choose_by_letter', lang, letter=letter),
                    reply_markup=get_currencies_by_letter_keyboard(currency_type, letter, selected_codes, lang)
                )
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã")

@dp.callback_query(lambda c: c.data.startswith("back_to_letters_"))
async def process_back_to_letters_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∫ –±—É–∫–≤–∞–º"""
    currency_type = callback.data.split("_")[3]
    
    try:
        lang = db.get_language(callback.from_user.id)
        text = _t('fiat_menu', lang) if currency_type == "fiat" else _t('crypto_menu', lang)
        await callback.message.edit_text(text, reply_markup=get_letter_keyboard(currency_type, lang))
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

@dp.callback_query(lambda c: c.data in ["back_to_fiat", "back_to_crypto"]) 
async def process_back_callback(callback: CallbackQuery):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∫ —Å–µ—Ç–∫–µ –±—É–∫–≤ –ø–æ —Ç–∏–ø—É –≤–∞–ª—é—Ç"""
	try:
		lang = db.get_language(callback.from_user.id)
		if callback.data == "back_to_fiat":
			text = _t('fiat_menu', lang)
			await callback.message.edit_text(text, reply_markup=get_letter_keyboard("fiat", lang))
		elif callback.data == "back_to_crypto":
			text = _t('crypto_menu', lang)
			await callback.message.edit_text(text, reply_markup=get_letter_keyboard("crypto", lang))
	except Exception:
		# Try to get language again, but fallback to default if it fails
		try:
			fallback_lang = db.get_language(callback.from_user.id)
		except Exception:
			fallback_lang = 'en'  # Default fallback
		await callback.answer(_t('already_here', fallback_lang))

@dp.callback_query(lambda c: c.data == "api_source")
async def process_api_source_callback(callback: CallbackQuery):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫—É—Ä—Å–æ–≤"""
	user_id = callback.from_user.id
	current = db.get_api_source(user_id)
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('api_choose', lang), reply_markup=get_api_source_keyboard(current, lang))

@dp.callback_query(lambda c: c.data.startswith("set_api_"))
async def process_set_api_callback(callback: CallbackQuery):
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫—É—Ä—Å–æ–≤"""
	user_id = callback.from_user.id
	source = callback.data.split("set_api_")[1]
	if source not in ["auto", "currencyfreaks", "exchangerate", "nbrb"]:
		await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
		return
	db.set_api_source(user_id, source)
	await callback.answer(_t('api_changed', db.get_language(callback.from_user.id)))
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('api_changed', lang), reply_markup=get_back_keyboard("back_to_settings", lang))

@dp.callback_query(lambda c: c.data == "debug_mode")
async def process_debug_mode_callback(callback: CallbackQuery):
	"""–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏"""
	user_id = callback.from_user.id
	enabled = db.get_debug_mode(user_id)
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('debug_title', lang), reply_markup=get_debug_mode_keyboard(enabled, lang))

@dp.callback_query(lambda c: c.data in ["set_debug_on", "set_debug_off"]) 
async def process_set_debug_mode(callback: CallbackQuery):
	user_id = callback.from_user.id
	enabled = callback.data == "set_debug_on"
	db.set_debug_mode(user_id, enabled)
	await callback.answer(_t('debug_changed', db.get_language(callback.from_user.id)))
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('debug_changed', lang), reply_markup=get_back_keyboard("back_to_settings", lang))

@dp.callback_query(lambda c: c.data == "language")
async def process_language_callback(callback: CallbackQuery):
	user_id = callback.from_user.id
	current = db.get_language(user_id)
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('lang_choose', lang), reply_markup=get_language_keyboard(current, lang))

@dp.callback_query(lambda c: c.data.startswith("set_lang_"))
async def process_set_language_callback(callback: CallbackQuery):
	user_id = callback.from_user.id
	lang = callback.data.split("set_lang_")[1]
	if lang not in ["ru","en"]:
		await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —è–∑—ã–∫")
		return
	db.set_language(user_id, lang)
	await callback.answer(_t('lang_changed', db.get_language(callback.from_user.id)))
	lang2 = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('lang_changed', lang2), reply_markup=get_back_keyboard("back_to_settings", lang2))

@dp.callback_query(lambda c: c.data == "appearance")
async def process_appearance_callback(callback: CallbackQuery):
	user_id = callback.from_user.id
	prefs = db.get_appearance(user_id)
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(
		_t('settings', lang),
		reply_markup=get_appearance_keyboard(
			show_flags=prefs.get('show_flags', True),
			show_codes=prefs.get('show_codes', True),
			show_symbols=prefs.get('show_symbols', True),
			compact=prefs.get('compact', False),
			lang=lang
		)
	)

@dp.callback_query(lambda c: c.data in ["toggle_compact","toggle_flags","toggle_codes","toggle_symbols"]) 
async def process_toggle_appearance(callback: CallbackQuery):
	user_id = callback.from_user.id
	prefs = db.get_appearance(user_id)
	key_map = {
		"toggle_compact": 'compact',
		"toggle_flags": 'show_flags',
		"toggle_codes": 'show_codes',
		"toggle_symbols": 'show_symbols',
	}
	key = key_map[callback.data]
	db.set_appearance(user_id, **{key: not prefs.get(key, False)})
	prefs = db.get_appearance(user_id)
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(
		_t('settings', lang),
		reply_markup=get_appearance_keyboard(
			show_flags=prefs.get('show_flags', True),
			show_codes=prefs.get('show_codes', True),
			show_symbols=prefs.get('show_symbols', True),
			compact=prefs.get('compact', False),
			lang=lang
		)
	)

@dp.message()
async def process_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global last_activity_time
    last_activity_time = time.time()
    
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
        if not message.text:
            return
            
        text = message.text.strip()
        
        if not text:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        processing_mode = db.get_processing_mode(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if processing_mode == "simplified":
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ
            if not text[0].isdigit():
                return
            result = await process_currency_conversion(text, user_id)
        elif processing_mode == "standard":
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ W2N/M2N
            result = await process_currency_conversion(text, user_id, use_w2n=False)
        else:  # advanced
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - —Å W2N –∏ M2N
            result = await process_currency_conversion(text, user_id, use_w2n=True)
        
        if result:
            await message.answer(result)
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await message.answer(_t('error_processing', db.get_language(message.from_user.id)))

async def process_currency_conversion(text: str, user_id: int, use_w2n: bool = False) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    result = currency_service.extract_number_and_currency(text)
    
    if not result and use_w2n:
        # –ü—Ä–æ–±—É–µ–º W2N
        words_number = currency_service.words_to_number(text)
        if words_number:
            # –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ
            for currency_alias, currency_code in CURRENCY_ALIASES.items():
                if currency_alias in text.lower():
                    result = (words_number, currency_code)
                    break
    
    if not result and use_w2n:
        # –ü—Ä–æ–±—É–µ–º M2N
        result = currency_service.money_to_number(text)
    
    if not result:
        return ""
    
    amount, from_currency = result
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    selected_currencies = db.get_selected_currencies(user_id)
    all_target_currencies = selected_currencies['fiat'] + selected_currencies['crypto']
    
    if not all_target_currencies:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç, –ø—Ä–æ—Å–∏–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        lang = db.get_language(user_id)
        return _t('no_currencies_selected', lang)
    
    # –£–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ü–µ–ª–µ–π
    if from_currency in all_target_currencies:
        all_target_currencies.remove(from_currency)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É
    api_source = db.get_api_source(user_id)
    conversions = await currency_service.convert_currency(amount, from_currency, all_target_currencies, api_source=api_source)
    
    if not conversions:
        return _t('conversion_failed', db.get_language(user_id), amount=amount, from_currency=from_currency)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    prefs = db.get_appearance(user_id)
    top_flag = currency_service._get_currency_flag(from_currency) if prefs.get('show_flags', True) else ''
    top_code = f" {from_currency}" if prefs.get('show_codes', True) else ''
    response = f"{top_flag}{amount}{top_code}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –≤–∞–ª—é—Ç
    fiat_results = []
    crypto_results = []
    
    debug_enabled = db.get_debug_mode(user_id)
    for currency, info in conversions.items():
        # –¥–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ convert_currency –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ; –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
        if isinstance(info, dict):
            converted_amount = info.get('amount', 0)
            source = info.get('source')
        else:
            converted_amount = info
            source = None
        formatted_amount = currency_service.format_currency_amount(converted_amount, currency, prefs)
        if debug_enabled and source:
            formatted_amount = f"{formatted_amount}  (src: {source})"
        if currency in FIAT_CURRENCIES:
            fiat_results.append(formatted_amount)
        else:
            crypto_results.append(formatted_amount)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    blocks = []
    if fiat_results:
        blocks.append("\n".join(fiat_results))
    if crypto_results:
        blocks.append("\n".join(crypto_results))
    response += "\n\n".join(blocks)
    
    return response

@dp.inline_query()
async def inline_query_handler(inline_query: InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å–æ–≤"""
    global last_activity_time
    last_activity_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not inline_query.query:
        query = ""
    else:
        query = inline_query.query.strip()
    
    if not query:
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        lang = db.get_language(inline_query.from_user.id)
        results = [
            InlineQueryResultArticle(
                id="help",
                title=_t('inline_help_title', lang),
                description=_t('inline_help_desc', lang),
                input_message_content=InputTextMessageContent(
                    message_text=_t('inline_help_message', lang)
                )
            )
        ]
        await inline_query.answer(results=results, cache_time=300)
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ –∏ –≤–∞–ª—é—Ç—É
        result = currency_service.extract_number_and_currency(query)
        
        if not result:
            # –ü—Ä–æ–±—É–µ–º W2N
            words_number = currency_service.words_to_number(query)
            if words_number:
                # –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ —Ç–µ–∫—Å—Ç–µ
                for currency_alias, currency_code in CURRENCY_ALIASES.items():
                    if currency_alias in query.lower():
                        result = (words_number, currency_code)
                        break
        
        if not result:
            # –ü—Ä–æ–±—É–µ–º M2N
            result = currency_service.money_to_number(query)
        
        if not result:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            lang = db.get_language(inline_query.from_user.id)
            results = [
                InlineQueryResultArticle(
                    id="error",
                    title=_t('inline_err_title', lang),
                    description=_t('inline_err_desc', lang, query=query),
                    input_message_content=InputTextMessageContent(
                        message_text=_t('inline_err_message', lang, query=query)
                    )
                )
            ]
            await inline_query.answer(results=results, cache_time=300)
            return
        
        amount, from_currency = result
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤–∞–ª—é—Ç—ã –∫–∞–∫ –∏ –≤ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        selected = db.get_selected_currencies(inline_query.from_user.id)
        all_target = selected['fiat'] + selected['crypto']
        if not all_target:
            all_target = list(FIAT_CURRENCIES.keys()) + list(CRYPTO_CURRENCIES.keys())
        if from_currency in all_target:
            all_target.remove(from_currency)
        api_source = db.get_api_source(inline_query.from_user.id)
        conversions = await currency_service.convert_currency(amount, from_currency, all_target, api_source=api_source)
        
        if not conversions:
            lang = db.get_language(inline_query.from_user.id)
            results = [
                InlineQueryResultArticle(
                    id="error",
                    title=_t('inline_fail_title', lang),
                    description=_t('inline_fail_desc', lang),
                    input_message_content=InputTextMessageContent(
                        message_text=_t('inline_fail_message', lang, amount=amount, from_currency=from_currency)
                    )
                )
            ]
            await inline_query.answer(results=results, cache_time=300)
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        prefs = db.get_appearance(inline_query.from_user.id)
        top_flag = currency_service._get_currency_flag(from_currency) if prefs.get('show_flags', True) else ''
        top_code = f" {from_currency}" if prefs.get('show_codes', True) else ''
        response = f"{top_flag}{amount}{top_code}\n\n"
        fiat_results = []
        crypto_results = []
        debug_enabled = db.get_debug_mode(inline_query.from_user.id)
        for currency, info in conversions.items():
            if isinstance(info, dict):
                converted_amount = info.get('amount', 0)
                source = info.get('source')
            else:
                converted_amount = info
                source = None
            formatted_amount = currency_service.format_currency_amount(converted_amount, currency, prefs)
            if debug_enabled and source:
                formatted_amount = f"{formatted_amount}  (src: {source})"
            if currency in FIAT_CURRENCIES:
                fiat_results.append(formatted_amount)
            else:
                crypto_results.append(formatted_amount)
        blocks = []
        if fiat_results:
            blocks.append("\n".join(fiat_results))
        if crypto_results:
            blocks.append("\n".join(crypto_results))
        response += "\n\n".join(blocks)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        lang = db.get_language(inline_query.from_user.id)
        results = [
            InlineQueryResultArticle(
                id="conversion",
                title=_t('inline_conv_title', lang, amount=amount, from_currency=from_currency),
                description=_t('inline_conv_desc', lang),
                input_message_content=InputTextMessageContent(
                    message_text=response,
                    parse_mode="Markdown"
                )
            )
        ]
        
        await inline_query.answer(results=results, cache_time=300)
        
    except Exception as e:
        print(f"Error in inline query: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        lang = db.get_language(inline_query.from_user.id)
        results = [
            InlineQueryResultArticle(
                id="error",
                title=_t('inline_proc_err_title', lang),
                description=_t('inline_proc_err_desc', lang),
                input_message_content=InputTextMessageContent(
                    message_text=_t('inline_proc_err_message', lang)
                )
            )
        ]
        await inline_query.answer(results=results, cache_time=300)

@dp.callback_query(lambda c: c.data == "back_to_currency_selection")
async def process_back_to_currency_selection(callback: CallbackQuery):
	lang = db.get_language(callback.from_user.id)
	await callback.message.edit_text(_t('choose_type', lang), reply_markup=get_currency_selection_keyboard(lang))

async def main():
	"""–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
	global last_activity_time, update_manager
	
	logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç...")
	
	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	restart_info = check_restart_after_update()
	if restart_info:
		logger.info(f"üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {restart_info.get('version', 'Unknown')}")
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	update_manager = UpdateManager(bot, db)
	logger.info(f"üì¶ –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í–µ—Ä—Å–∏—è: {update_manager.current_version}")
	
	# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
	try:
		await bot.set_my_commands([
			types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
			types.BotCommand(command="help", description="üìñ –°–ø—Ä–∞–≤–∫–∞ –∏ –ø–æ–º–æ—â—å"),
			types.BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
			types.BotCommand(command="version", description="üìã –í–µ—Ä—Å–∏—è –±–æ—Ç–∞"),
			types.BotCommand(command="update", description="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∞–¥–º–∏–Ω)")
		])
		logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
	except Exception as e:
		logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
	
	# –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ —Ñ–æ–Ω–µ
	keep_alive_task = asyncio.create_task(keep_alive())
	
	# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
	update_monitor_task = asyncio.create_task(update_manager.start_update_monitor())
	
	try:
		logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
		
		# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ polling –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞—Å—ã–ø–∞–Ω–∏—è"
		await dp.start_polling(
			bot,
			skip_updates=True,
			allowed_updates=["message", "callback_query", "inline_query"],
			drop_pending_updates=True,
			close_bot_session=False,  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
			timeout=30,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
			limit=100,   # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
			backoff_factor=1.5,  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
			request_timeout=30.0  # Timeout –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
		)
		
	except KeyboardInterrupt:
		logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
	except Exception as e:
		logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
		logger.error(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
		import traceback
		logger.error(f"üìã Traceback: {traceback.format_exc()}")
	finally:
		logger.info("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
		
		# –û—Ç–º–µ–Ω—è–µ–º keep-alive –∑–∞–¥–∞—á—É
		keep_alive_task.cancel()
		try:
			await keep_alive_task
		except asyncio.CancelledError:
			pass
		
		# –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
		update_monitor_task.cancel()
		try:
			await update_monitor_task
		except asyncio.CancelledError:
			pass
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
		try:
			await currency_service.close()
		except Exception as e:
			logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è currency_service: {e}")
		
		# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
		try:
			await bot.session.close()
		except Exception as e:
			logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è bot session: {e}")
		
		logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = ["config.py", "currency_service.py", "database.py", "keyboards.py"]
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    if not os.path.exists(".env"):
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–∑–¥–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞.")
        print("–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env:")
        print("BOT_TOKEN=your_bot_token_here")
        return False
    
    return True

def show_startup_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–ø—É—Å–∫–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç...")
    print("=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
    print("1. üöÄ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("2. üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏)")
    print("3. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 50)
    
    while True:
        try:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
            if choice in ["1", "2", "3"]:
                return choice
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        except KeyboardInterrupt:
            print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return "3"

def setup_logging(debug_mode=False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
    level = logging.DEBUG if debug_mode else logging.INFO
    format_str = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    handlers = [
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
    
    if debug_mode:
        handlers.append(logging.FileHandler('bot_debug.log', encoding='utf-8'))
    
    logging.basicConfig(
        level=level,
        format=format_str,
        handlers=handlers
    )
    
    logger = logging.getLogger(__name__)
    if debug_mode:
        logger.info("üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
    return logger

async def run_bot_with_monitoring():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (–∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å–±–æ—è—Ö)"""
    restart_count = 0
    max_restarts = 10
    
    while restart_count < max_restarts:
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count + 1})...")
            await main()
        except Exception as e:
            restart_count += 1
            logger.error(f"‚ùå –ë–æ—Ç —É–ø–∞–ª (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}): {e}")
            
            if restart_count < max_restarts:
                wait_time = min(30, restart_count * 5)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({max_restarts})")
                break
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            break

def main_cli():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="Telegram –±–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç")
    parser.add_argument("--monitor", "-m", action="store_true", 
                       help="–ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (–∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)")
    parser.add_argument("--debug", "-d", action="store_true", 
                       help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    parser.add_argument("--menu", action="store_true", 
                       help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    if not check_required_files():
        return 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(args.debug)
    
    if args.menu:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        choice = show_startup_menu()
        if choice == "3":
            return 0
        elif choice == "2":
            setup_logging(debug_mode=True)
    
    try:
        if args.monitor or (args.menu and choice == "1"):
            # –ó–∞–ø—É—Å–∫ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            asyncio.run(run_bot_with_monitoring())
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
            asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return 0
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main_cli()) 