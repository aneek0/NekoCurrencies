#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ NekoCurrencies –±–æ—Ç–∞
"""
import asyncio
import time
import statistics
from typing import List, Dict, Any
import json

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from currency_service import CurrencyService
    from performance_optimizer import PerformanceOptimizer
    from math_parser import MathParser
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    exit(1)

class PerformanceBenchmark:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.currency_service = CurrencyService()
        self.math_parser = MathParser()
        self.results = {}
        
    async def benchmark_currency_conversion(self, iterations: int = 10) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...")
        
        test_cases = [
            (100, "USD", ["EUR", "RUB", "UAH"]),
            (50, "EUR", ["USD", "RUB"]),
            (1000, "RUB", ["USD", "EUR"])
        ]
        
        times = []
        
        for i in range(iterations):
            for amount, from_curr, to_currs in test_cases:
                start_time = time.time()
                try:
                    await self.currency_service.convert_currency(amount, from_curr, to_currs)
                    end_time = time.time()
                    times.append(end_time - start_time)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
        
        if times:
            avg_time = statistics.mean(times)
            min_time = min(times)
            max_time = max(times)
            std_dev = statistics.stdev(times) if len(times) > 1 else 0
            
            result = {
                "test_type": "currency_conversion",
                "iterations": len(times),
                "avg_time_ms": round(avg_time * 1000, 2),
                "min_time_ms": round(min_time * 1000, 2),
                "max_time_ms": round(max_time * 1000, 2),
                "std_dev_ms": round(std_dev * 1000, 2),
                "total_time_ms": round(sum(times) * 1000, 2)
            }
            
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç: {result['avg_time_ms']}ms –≤ —Å—Ä–µ–¥–Ω–µ–º")
            return result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return {}
    
    async def benchmark_math_parsing(self, iterations: int = 50) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...")
        
        test_expressions = [
            "100 + 50 –¥–æ–ª–ª–∞—Ä–æ–≤",
            "(20 + 5) * 4 –µ–≤—Ä–æ",
            "1000 / 2 + 100 —Ä—É–±–ª–µ–π",
            "50 * 2 - 25 USD",
            "10 + 20 + 30 + 40 EUR"
        ]
        
        times = []
        
        for i in range(iterations):
            for expr in test_expressions:
                start_time = time.time()
                try:
                    self.math_parser.parse_and_evaluate(expr)
                    end_time = time.time()
                    times.append(end_time - start_time)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
        
        if times:
            avg_time = statistics.mean(times)
            min_time = min(times)
            max_time = max(times)
            std_dev = statistics.stdev(times) if len(times) > 1 else 0
            
            result = {
                "test_type": "math_parsing",
                "iterations": len(times),
                "avg_time_ms": round(avg_time * 1000, 3),
                "min_time_ms": round(min_time * 1000, 3),
                "max_time_ms": round(max_time * 1000, 3),
                "std_dev_ms": round(std_dev * 1000, 3),
                "total_time_ms": round(sum(times) * 1000, 3)
            }
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏: {result['avg_time_ms']}ms –≤ —Å—Ä–µ–¥–Ω–µ–º")
            return result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return {}
    
    async def benchmark_text_processing(self, iterations: int = 100) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π)...")
        
        test_messages = [
            "100 –¥–æ–ª–ª–∞—Ä–æ–≤",
            "50 –µ–≤—Ä–æ –≤ —Ä—É–±–ª–∏",
            "1000 —Ä—É–±–ª–µ–π –≤ –≥—Ä–∏–≤–Ω—ã",
            "25 –¥–æ–ª–ª–∞—Ä–æ–≤ + 10 –µ–≤—Ä–æ",
            "BTC 0.001 –≤ USD"
        ]
        
        times = []
        
        for i in range(iterations):
            for msg in test_messages:
                start_time = time.time()
                try:
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    await asyncio.sleep(0.001)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    end_time = time.time()
                    times.append(end_time - start_time)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {i}: {e}")
        
        if times:
            avg_time = statistics.mean(times)
            min_time = min(times)
            max_time = max(times)
            std_dev = statistics.stdev(times) if len(times) > 1 else 0
            
            result = {
                "test_type": "text_processing",
                "iterations": len(times),
                "avg_time_ms": round(avg_time * 1000, 3),
                "min_time_ms": round(min_time * 1000, 3),
                "max_time_ms": round(max_time * 1000, 3),
                "std_dev_ms": round(std_dev * 1000, 3),
                "total_time_ms": round(sum(times) * 1000, 3)
            }
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: {result['avg_time_ms']}ms –≤ —Å—Ä–µ–¥–Ω–µ–º")
            return result
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
            return {}
    
    async def run_all_benchmarks(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ NekoCurrencies...")
        print("=" * 50)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è—Ö
        opt_info = PerformanceOptimizer.get_optimization_info()
        print(f"üíª –°–∏—Å—Ç–µ–º–∞: {opt_info['system']}")
        print(f"üêç Python: {opt_info['python_version']}")
        print(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {', '.join(opt_info['optimizations_applied']) if opt_info['optimizations_applied'] else '–ù–µ—Ç'}")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        start_time = time.time()
        
        self.results["currency_conversion"] = await self.benchmark_currency_conversion()
        self.results["math_parsing"] = await self.benchmark_math_parsing()
        self.results["text_processing"] = await self.benchmark_text_processing()
        
        total_time = time.time() - start_time
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.results["summary"] = {
            "total_benchmark_time": round(total_time, 2),
            "system_info": opt_info,
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
        }
        
        print("=" * 50)
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return self.results
    
    def save_results(self, filename: str = "benchmark_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.results, f, indent=2, ensure_ascii=False)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\nüìà –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
        print("-" * 30)
        
        for test_name, result in self.results.items():
            if test_name == "summary":
                continue
                
            if result:
                avg_time = result.get('avg_time_ms', 0)
                if avg_time > 0:
                    print(f"{test_name.replace('_', ' ').title()}: {avg_time}ms")
        
        print("-" * 30)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    benchmark = PerformanceBenchmark()
    
    try:
        await benchmark.run_all_benchmarks()
        benchmark.print_summary()
        benchmark.save_results()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            await benchmark.currency_service.close()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main()) 